
 #include "pitches.h"

// notes in the melody:

int DUR_SEMIBREVE_DOTTED = 3000;
int DUR_SEMIBREVE = 1500;
int DUR_MINIM_DOTTED = DUR_SEMIBREVE / 3 * 2;
int DUR_MINIM = DUR_SEMIBREVE / 2;
int DUR_CROCHET_DOTTED = DUR_SEMIBREVE / 3;
int DUR_CROCHET = DUR_SEMIBREVE / 4;
int DUR_QUAVER_DOTTED = DUR_SEMIBREVE / 6;
int DUR_QUAVER = DUR_SEMIBREVE / 8;
int DUR_SEMIQUAVER_DOTTED = DUR_SEMIBREVE / 12;
int DUR_SEMIQUAVER = DUR_SEMIBREVE / 16;

int melody[] = {
  // intro
  NOTE_D6, NOTE_E6, NOTE_C6, NOTE_A5, NOTE_B5, NOTE_G5,
  NOTE_D5, NOTE_E5, NOTE_C5, NOTE_A4, NOTE_B4, NOTE_G4,
  NOTE_D4, NOTE_E4, NOTE_C4, NOTE_A3, NOTE_B3, NOTE_A3, NOTE_GS3,
  NOTE_G3, 0, NOTE_G4, NOTE_D4, NOTE_DS4,
  
  // verse 1
  NOTE_D4, NOTE_C5, NOTE_E4, NOTE_C5, NOTE_E4, NOTE_C5,
  NOTE_C5, NOTE_D5, NOTE_DS5,

  NOTE_E5, NOTE_C5, NOTE_D5, NOTE_E5, NOTE_B4, NOTE_D5,
  NOTE_C5, NOTE_D4, NOTE_DS4,
  
  NOTE_D4, NOTE_C5, NOTE_E4, NOTE_C5, NOTE_E4, NOTE_C5,
  NOTE_A4, NOTE_G4,
  
  NOTE_FS4, NOTE_A4, NOTE_C5, NOTE_E5, NOTE_D5, NOTE_C5, NOTE_A4,
  NOTE_D5, NOTE_D4, NOTE_DS4,

  NOTE_D4, NOTE_C5, NOTE_E4, NOTE_C5, NOTE_E4, NOTE_C5,
  NOTE_C5, NOTE_D5, NOTE_DS5,

  NOTE_E5, NOTE_C5, NOTE_D5, NOTE_E5, NOTE_B4, NOTE_D5,
  NOTE_C5, NOTE_C5, NOTE_D5,

  NOTE_E5, NOTE_C5, NOTE_D5, NOTE_E5, NOTE_C5, NOTE_D5, NOTE_C5,
  NOTE_E5, NOTE_C5, NOTE_D5, NOTE_E5, NOTE_C5, NOTE_D5, NOTE_C5,
  NOTE_E5, NOTE_C5, NOTE_D5, NOTE_E5, NOTE_B4, NOTE_D5,
  NOTE_C5, NOTE_E5, NOTE_F5, NOTE_FS5,

  // verse 2
  NOTE_G5, NOTE_A5, NOTE_G5, NOTE_E5, NOTE_F5, NOTE_FS5,
  NOTE_G5, NOTE_A5, NOTE_G5, NOTE_E5, NOTE_C5, NOTE_G4,
  
  NOTE_A4, NOTE_B4, NOTE_C5, NOTE_D5, NOTE_E5, NOTE_D5, NOTE_C5, NOTE_D5,
  NOTE_G4, NOTE_E5, NOTE_F5, NOTE_G5, NOTE_A5, NOTE_G5, NOTE_E5, NOTE_F5,

  NOTE_G5, NOTE_A5, NOTE_G5, NOTE_E5, NOTE_F5, NOTE_FS5,
  NOTE_G5, NOTE_A5, NOTE_G5, NOTE_G5, NOTE_A5, NOTE_AS5,

  NOTE_B5, NOTE_B5, NOTE_B5, NOTE_A5, NOTE_F5, NOTE_D5,
  NOTE_G5, NOTE_E5, NOTE_F5, NOTE_FS5,

  NOTE_G5, NOTE_A5, NOTE_G5, NOTE_E5, NOTE_F5, NOTE_FS5,
  NOTE_G5, NOTE_A5, NOTE_G5, NOTE_E5, NOTE_C5, NOTE_G4,

  NOTE_A4, NOTE_B4, NOTE_C5, NOTE_D5, NOTE_E5, NOTE_D5, NOTE_C5, NOTE_D5,
  NOTE_C5, NOTE_G4, NOTE_FS4, NOTE_G4,

  NOTE_C5, NOTE_A4, NOTE_C5, NOTE_A4, NOTE_C5, NOTE_A4,
  NOTE_G4, NOTE_C5, NOTE_E5, NOTE_G5, NOTE_E5, NOTE_C5, NOTE_G4,

  NOTE_A4, NOTE_C5, NOTE_E5, NOTE_D5, NOTE_C5
};

int noteDurations[] = {
  // intro
  DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_QUAVER,
  DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_QUAVER,
  DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,
  DUR_QUAVER, DUR_QUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,
  
  // verse 1
  DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_CROCHET_DOTTED,
  DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,

  DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_QUAVER,
  DUR_CROCHET_DOTTED, DUR_SEMIQUAVER, DUR_SEMIQUAVER,
  
  DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_CROCHET_DOTTED,
  DUR_SEMIQUAVER, DUR_SEMIQUAVER,
  
  DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,
  DUR_CROCHET_DOTTED, DUR_SEMIQUAVER, DUR_SEMIQUAVER,
  
  DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_CROCHET_DOTTED,
  DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,

  DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_QUAVER,
  DUR_CROCHET_DOTTED, DUR_SEMIQUAVER, DUR_SEMIQUAVER,

  DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,
  DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,
  DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_QUAVER,
  DUR_CROCHET_DOTTED, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,

  // verse 2
  DUR_QUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,
  DUR_QUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,
  
  DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,
  DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,

  DUR_QUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,
  DUR_QUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,

  DUR_SEMIQUAVER, DUR_QUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,
  DUR_CROCHET_DOTTED, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,

  DUR_QUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,
  DUR_QUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,

  DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,
  DUR_CROCHET_DOTTED, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,

  DUR_QUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,
  DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER, DUR_SEMIQUAVER,
  DUR_QUAVER, DUR_QUAVER, DUR_SEMIQUAVER, DUR_QUAVER, DUR_CROCHET_DOTTED
};

void setup() {
  
  pinMode(2, OUTPUT);
  pinMode(3, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(5, OUTPUT);
  pinMode(6, OUTPUT);
  pinMode(7, OUTPUT);
  pinMode(8, OUTPUT);
  pinMode(9, OUTPUT);
  pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);
  pinMode(12, OUTPUT);
  pinMode(13, OUTPUT);
  
  int totalNoteCount = sizeof(noteDurations) / 2;

  for (int thisNote = 0; thisNote < totalNoteCount ; thisNote++) {
    int currentLEDLeft = (thisNote % 5) + 1;
    int currentLEDRight = 13 - (thisNote % 6) - 1;

    int noteDuration = noteDurations[thisNote];
    tone(8, melody[thisNote], noteDuration);
    digitalWrite(currentLEDLeft, HIGH);
    digitalWrite(currentLEDRight, HIGH);
    
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);

    noTone(8);
    digitalWrite(currentLEDLeft, LOW);
    digitalWrite(currentLEDRight, LOW);
    
  }
}

void loop() {
  
}
